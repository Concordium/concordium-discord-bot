# =============================================================================
# Server Configuration (used by server.js for OAuth redirects, etc.)
# =============================================================================

# Public base URL of your web server (HTTPS strongly recommended).
# Example: https://yourdomain.com
SERVER_URL=

# OAuth redirect/callback URL. Must match GitHub App settings.
# Example: https://yourdomain.com/callback
REDIRECT_URI=

# =============================================================================
# GitHub App OAuth Configuration
# =============================================================================

# GitHub OAuth App credentials (from GitHub settings).
CLIENT_ID=
CLIENT_SECRET=

# =============================================================================
# Concordium / Node / Explorers
# =============================================================================

# Base URL for block links in notifications (explorer/dash).
# Example (Mainnet CCDScan): https://ccdscan.io/
CCDSCAN_BASE_URL=

# Path to `concordium-client` binary.
# Use absolute path if not in $PATH. Example: /usr/local/bin/concordium-client
# Default if empty: "concordium-client"
CONCORDIUM_CLIENT_PATH=

# gRPC node connection (host + port + TLS).
# Examples:
#   GRPC_IP=grpc.mainnet.concordium.software
#   GRPC_PORT=20000
#   GRPC_TLS=1   (enable TLS)   | 0 (disable)
GRPC_IP=
GRPC_PORT=
GRPC_TLS=

# =============================================================================
# Discord Bot Configuration
# =============================================================================

# Bot token from Discord Developer Portal.
DISCORD_BOT_TOKEN=

# Guild (server) ID where commands and roles are managed.
DISCORD_GUILD_ID=

# =============================================================================
# Discord Roles (IDs)
# =============================================================================

# Internal "team" role allowed to run !setup, etc.
TEAM_ROLE_ID=

# Target roles assigned after successful verifications.
VALIDATOR_ROLE_ID=
DEV_ROLE_ID=
DELEGATOR_ROLE_ID=

# =============================================================================
# Discord Channels (IDs)
# =============================================================================

# Channel where users claim roles / see the select menu (posted by !setup).
CLAIM_CHANNEL_ID=

# Private validator lounge channel (granted after validator verification).
VALIDATOR_CHANNEL_ID=

# Moderation / audit log channel for bot actions.
MOD_LOGS_CHANNEL_ID=

# =============================================================================
# Discord AutoModeration (optional)
# =============================================================================

# AutoMod rule ID the bot integrates with (to allow links in private tickets, etc.).
AUTOMOD_RULE_ID=

# =============================================================================
# PostgreSQL Database Configuration
# =============================================================================
# Standard Postgres settings. PG_PORT default: 5432
PG_USER=
PG_HOST=
PG_DATABASE=
PG_PASSWORD=
PG_PORT=

# =============================================================================
# Internal HTTP (bot -> server.js inside container/network)
# =============================================================================

# Base URL for internal HTTP calls from the bot to server.js.
# Example (same container/network): http://127.0.0.1:3000
INTERNAL_HTTP_BASE=

# =============================================================================
# gRPC / tx-logger verbosity & filters (txloggerListener.js)
# =============================================================================

# TXL_DEBUG: extra debug logs from the gRPC listener and memo waiters.
# Allowed: 0/1 or false/true (case-insensitive). Default: 0
# 1 (true)  -> verbose internal logs (sender, memo matches, waiter TTL)
# 0 (false) -> quieter
TXL_DEBUG=

# TXL_LOG_BLOCKS: per-block log lines when new finalized blocks are processed.
# Allowed: 0/1 or false/true. Default: 0
TXL_LOG_BLOCKS=

# TXL_LOG_SPECIAL: log "special events" stream (e.g., PayDayAccountReward, suspension pending).
# Allowed: 0/1 or false/true. Default: 0
TXL_LOG_SPECIAL=

# TXL_SPECIAL_TAGS: optional allow-list of special-event tags (CSV).
# If set, only tags in this list are logged. Example: PaydayAccountReward,ValidatorSuspended
TXL_SPECIAL_TAGS=

# TXL_LOG_TX_EVENTS: log transaction events (DelegationAdded, DelegationRemoved, etc.).
# Allowed: 0/1 or false/true. Default: 0
TXL_LOG_TX_EVENTS=

# TXL_EVENT_TAGS: optional allow-list of tx event tags (CSV).
# If set AND TXL_LOG_TX_EVENTS=1, only these tags are logged. Example: DelegationAdded,DelegationSetDelegationTarget
TXL_EVENT_TAGS=

# (Optional) ALERTS_DEBUG: extra logs from alerts.js (DM fan-out, commission updates, etc.)
# Allowed: 0/1 or false/true. Default: 0
ALERTS_DEBUG=

# =============================================================================
# Transaction waiters & thread cleanup (tuning)
# =============================================================================

# TXL_WAITER_TTL_MINUTES: how long we wait for a transaction memo from a specific sender (minutes).
# Default: 20
TXL_WAITER_TTL_MINUTES=

# TXL_PRUNE_INTERVAL_MS: how often to prune expired memo waiters (milliseconds).
# Default: 60000 (1 minute)
TXL_PRUNE_INTERVAL_MS=

# THREAD_CLEANUP_INTERVAL_MS: how often to check and auto-close inactive verification threads (milliseconds).
# THREAD_INACTIVITY_LIMIT_MS: inactivity threshold (milliseconds).
THREAD_CLEANUP_INTERVAL_MS=
THREAD_INACTIVITY_LIMIT_MS=

# =============================================================================
# CSV Import & Post-Import Enrichment (backfill)
# =============================================================================

# IMPORT_VERIFICATIONS_CSV: path to v1 CSV to import at startup (inside container).
# Example: /seed/verifications_v1.csv
IMPORT_VERIFICATIONS_CSV=

# IMPORT_RUN_ON_EMPTY:
#   1 (true)  -> import ONLY if the 'verifications' table is empty (safe default for production)
#   0 (false) -> always run import (rows with existing IDs are skipped due to ON CONFLICT DO NOTHING)
# Default: 1
IMPORT_RUN_ON_EMPTY=

# IMPORT_POST_ENRICH:
#   1 (true)  -> after import, enrich data: fill validator_id/is_suspended, fetch commissions,
#               sync validator_delegators, and set delegation_target for delegators.
#   0 (false) -> skip enrichment step.
# Default: 1
IMPORT_POST_ENRICH=

# BACKFILL_DEBUG: verbose logs for the importer/enricher.
# Allowed: 0/1 or false/true. Default: 0
BACKFILL_DEBUG=